
//Consume Rest API + fetch API
useEffect(() => {   //useEffect Hook: perform API request
    // data fetching here
}, []);

const [posts, setPosts] = useState([]); //useState Hook: prepare state for the requested data to be stored
//post: state variblae
//setpost: function to update post

//basic fetch method
fetch('$API_ADDRESS') //URL argument, returns Promise
    .then(response => response.json()) //handle success or failure by then catch //default response is HTTP, we can change to JSON by method
    .then(data => this.setState({ postId: data.id })); 


//Perform GET Request in React with Fetch API
//You can use the HTTP GET method to request data from an endpoint.


//Perform a POST Request in React With Fetch API
//differece to get: add method and two parameters
const addPosts = async (title, body) => { //parameter: title(header), body
    await fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    body: JSON.stringify({ //must stringify
       title: title,
       body: body,
       userId: Math.random().toString(36).slice(2),
    }),
    headers: {
       'Content-type': 'application/json; charset=UTF-8',
    },
    })
    .then((response) => response.json())
    .then((data) => {
       setPosts((posts) => [data, ...posts]);
       setTitle(''); //?
       setBody(''); //?
    })
    .catch((err) => {
       console.log(err.message);
    });
};
const handleSubmit = (e) => {
    e.preventDefault();
    addPosts(title, body);
 };    //?
 
 return (
    <div className="app">
       <div className="add-post-container">
          <form onSubmit={handleSubmit}>
             <input type="text" className="form-control" value={title}
                onChange={(e) => setTitle(e.target.value)}
             />
             <textarea name="" className="form-control" id="" cols="10" rows="8" 
                value={body} onChange={(e) => setBody(e.target.value)} 
             ></textarea>
             <button type="submit">Add Post</button>
          </form>
       </div>
       {/* ... */}
    </div>
 );
 }; //?
 
 export default App;
//body: holds the data we want to pass into the API, which we must first stringify because we are sending data to a web server
//type: header tells us the type of data, which is always the same when consuming REST API's.  
//state: state to hold the new data and distribute the remaining data into the array

//deletePost 
//method addition, 
//triggers when the button is clicked. we get the id of the specific post in which the button was clicked. Then we remove that data from the entire retuned data.
const deletePost = async (id) => {
    await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {
       method: 'DELETE',
    }).then((response) => {
       if (response.status === 200) {
          setPosts(
             posts.filter((post) => {
                return post.id !== id;
             })
          );
       } else {
          return;
       }
    });
    };
    return (
        <div className="posts-container">
           {posts.map((post) => {
              return (
                 <div className="post-card" key={post.id}>
                    {/* ... */}
                    <div className="button">
                       <div className="delete-btn" onClick={() => deletePost(post.id)}>
                          Delete
                       </div>
                    </div>    
                 </div>
              );
           })}
        </div>
        );
     };
     
     export default App;



     
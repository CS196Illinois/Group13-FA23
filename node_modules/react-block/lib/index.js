/**
 * Blocks implementation
 * @class
 * @author Andrew Wilson 
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _BlockStore = require('./BlockStore');

var blocks = (function (_Component) {
	_inherits(blocks, _Component);

	/** @constructor */

	function blocks(props) {
		_classCallCheck(this, blocks);

		_get(Object.getPrototypeOf(blocks.prototype), 'constructor', this).call(this, props);
	}

	/**
  * Render the blocksets
  */

	_createClass(blocks, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				null,
				this.renderBlockSet(this.props.data)
			);
		}
	}, {
		key: 'renderBlockSet',
		value: function renderBlockSet(blockSet) {
			var _this = this;

			var parentId = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

			return blockSet.filter(function (filterblock) {
				return filterblock.parentId == parentId;
			}).map(function (block) {
				var blockStyle = block.styles;
				var _blockId = block.id;
				return _this.renderBlock(_BlockStore.registeredBlocks[block.type], _extends({}, block.data, { key: block.id, styles: blockStyle, editable: _this.editable }), _this.renderBlockSet(blockSet, _blockId));
			});
		}
	}, {
		key: 'renderBlock',
		value: function renderBlock(type, props) {
			var children = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

			return _react2['default'].createElement(type, props, children);
		}

		/**
   * Returns block version
   * @returns {String}
   */
	}, {
		key: 'toString',
		value: function toString() {
			return 'Blocks v0.0.3 - ' + this.name + ' (v ' + this.version + '): ' + this.description;
		}
	}]);

	return blocks;
})(_react.Component);

exports['default'] = blocks;
module.exports = exports['default'];